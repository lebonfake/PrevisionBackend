// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrevisionBackend.Data;

#nullable disable

namespace PrevisionBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250813135040_AddedFluxIdToFerme")]
    partial class AddedFluxIdToFerme
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PrevisionBackend.Models.Assolement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CycleId")
                        .HasColumnType("int")
                        .HasColumnName("cycle");

                    b.Property<DateTime>("DateArrachage")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date_arrachage");

                    b.Property<DateTime>("DatePlantation")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date_plantation");

                    b.Property<DateTime>("DateRecolte")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date_recolte");

                    b.Property<string>("FermeCod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ferme");

                    b.Property<string>("FermeCodFerm")
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasRecieved")
                        .HasColumnType("bit")
                        .HasColumnName("hasRecieved");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<int>("NumCulture")
                        .HasColumnType("int")
                        .HasColumnName("num_culture");

                    b.Property<string>("Parcelle")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("parcelle");

                    b.Property<int>("SecteurId")
                        .HasColumnType("int")
                        .HasColumnName("secteur");

                    b.Property<float>("SuperficiePlante")
                        .HasColumnType("real")
                        .HasColumnName("superficiePlante");

                    b.Property<int>("VarieteChampId")
                        .HasColumnType("int")
                        .HasColumnName("variete_champ");

                    b.HasKey("ID");

                    b.HasIndex("CycleId");

                    b.HasIndex("FermeCodFerm");

                    b.HasIndex("SecteurId");

                    b.HasIndex("VarieteChampId");

                    b.HasIndex("FermeCod", "SecteurId", "CycleId", "Parcelle", "NumCulture", "VarieteChampId")
                        .IsUnique();

                    b.ToTable("Assolements");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Cycle", b =>
                {
                    b.Property<int>("CodeCycle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("code_cycle");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeCycle"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_start");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("designation");

                    b.HasKey("CodeCycle");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("PrevisionBackend.Models.EtapeFlux", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FluxId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordre")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FluxId");

                    b.ToTable("EtapeFlux");
                });

            modelBuilder.Entity("PrevisionBackend.Models.EtapeFluxValidateurPermission", b =>
                {
                    b.Property<int>("EtapeFluxId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ValidateurId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("PermissionPrevId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.HasKey("EtapeFluxId", "ValidateurId", "PermissionPrevId");

                    b.HasIndex("PermissionPrevId");

                    b.HasIndex("ValidateurId");

                    b.ToTable("EtapeFluxValidateurPermissions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.EtapePrev", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EtapeFluxId")
                        .HasColumnType("int");

                    b.Property<int?>("EtapeFluxId1")
                        .HasColumnType("int");

                    b.Property<int>("PrevisionId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EtapeFluxId");

                    b.HasIndex("EtapeFluxId1");

                    b.HasIndex("PrevisionId");

                    b.ToTable("EtapePrev");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Ferme", b =>
                {
                    b.Property<string>("CodFerm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cod_ferm");

                    b.Property<int>("CodRegion")
                        .HasColumnType("int")
                        .HasColumnName("cod_region");

                    b.Property<string>("CodeDomaine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CodeDomaine");

                    b.Property<int>("FluxId1")
                        .HasColumnType("int");

                    b.Property<string>("NomFerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nom_ferm");

                    b.Property<int>("RefProd")
                        .HasColumnType("int")
                        .HasColumnName("ref_prod");

                    b.Property<float>("Superficie")
                        .HasColumnType("real")
                        .HasColumnName("superficie");

                    b.Property<int>("SystemVersionId")
                        .HasColumnType("int");

                    b.HasKey("CodFerm");

                    b.HasIndex("CodRegion");

                    b.HasIndex("FluxId1");

                    b.HasIndex("RefProd");

                    b.HasIndex("SystemVersionId");

                    b.ToTable("Fermes");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Flux", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Flux");
                });

            modelBuilder.Entity("PrevisionBackend.Models.LignePrevision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPrevisionDetails")
                        .HasColumnType("int");

                    b.Property<int>("PrevisionDetailsId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valeur")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PrevisionDetailsId");

                    b.ToTable("LignePrevisions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Module", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleID"));

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ModuleID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Module_Permissions")
                        .HasColumnType("int");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionID");

                    b.HasIndex("Module_Permissions");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.PermissionPrev", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Permissions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PermissionPrevisions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Prevision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreePar")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FermeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FluxId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FermeId");

                    b.HasIndex("FluxId");

                    b.HasIndex("VersionId");

                    b.ToTable("PrevisionFermes");
                });

            modelBuilder.Entity("PrevisionBackend.Models.PrevisionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<int>("IdPrevision")
                        .HasColumnType("int");

                    b.Property<int>("NumCulture")
                        .HasColumnType("int");

                    b.Property<string>("Parcelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrevisionId")
                        .HasColumnType("int");

                    b.Property<int>("SecteurCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrevisionId");

                    b.HasIndex("SecteurCode");

                    b.ToTable("PrevisionDetails");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Producteur", b =>
                {
                    b.Property<int>("CodeProducteur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("code_producteur");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeProducteur"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("CodeProducteur");

                    b.ToTable("Producteurs");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Produit", b =>
                {
                    b.Property<int>("CodeProd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("code_prod");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeProd"));

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("designation");

                    b.HasKey("CodeProd");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Profile", b =>
                {
                    b.Property<int>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProfileID");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("PrevisionBackend.Models.ProfilePermission", b =>
                {
                    b.Property<int>("ProfileID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("PermissionID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("ProfileID", "PermissionID");

                    b.HasIndex("PermissionID");

                    b.ToTable("ProfilePermissions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Region", b =>
                {
                    b.Property<int>("CodRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_region");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodRegion"));

                    b.Property<string>("DesiRegion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("desi_region");

                    b.HasKey("CodRegion");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Secteur", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("code");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("CodFerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cod_ferm");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("designation");

                    b.Property<string>("FermeCodFerm")
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Superficie")
                        .HasColumnType("real")
                        .HasColumnName("superficie");

                    b.HasKey("Code");

                    b.HasIndex("CodFerm");

                    b.HasIndex("FermeCodFerm");

                    b.ToTable("Secteurs");
                });

            modelBuilder.Entity("PrevisionBackend.Models.SystemVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NombreVersion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SystemVersions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProfileID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Validateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Validateurs");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Variete", b =>
                {
                    b.Property<int>("CodeVar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("code_var");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeVar"));

                    b.Property<int>("CodeProd")
                        .HasColumnType("int")
                        .HasColumnName("code_prod");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("designation");

                    b.HasKey("CodeVar");

                    b.HasIndex("CodeProd");

                    b.ToTable("Varietes");
                });

            modelBuilder.Entity("PrevisionBackend.Models.VarieteChamp", b =>
                {
                    b.Property<int>("CodeVarChamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("code_varchamp");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeVarChamp"));

                    b.Property<int>("CodeVar")
                        .HasColumnType("int")
                        .HasColumnName("code_var");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("designation");

                    b.HasKey("CodeVarChamp");

                    b.HasIndex("CodeVar");

                    b.ToTable("VarieteChamps");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDay")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDay")
                        .HasColumnType("date");

                    b.Property<int>("SystemVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SystemVersionId");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Assolement", b =>
                {
                    b.HasOne("PrevisionBackend.Models.Cycle", "Cycle")
                        .WithMany("Assolements")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.Ferme", "Ferme")
                        .WithMany()
                        .HasForeignKey("FermeCod")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.Ferme", null)
                        .WithMany("Assolements")
                        .HasForeignKey("FermeCodFerm");

                    b.HasOne("PrevisionBackend.Models.Secteur", "Secteur")
                        .WithMany("Assolements")
                        .HasForeignKey("SecteurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.VarieteChamp", "VarieteChamp")
                        .WithMany("Assolements")
                        .HasForeignKey("VarieteChampId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cycle");

                    b.Navigation("Ferme");

                    b.Navigation("Secteur");

                    b.Navigation("VarieteChamp");
                });

            modelBuilder.Entity("PrevisionBackend.Models.EtapeFlux", b =>
                {
                    b.HasOne("PrevisionBackend.Models.Flux", "Flux")
                        .WithMany("Etapes")
                        .HasForeignKey("FluxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flux");
                });

            modelBuilder.Entity("PrevisionBackend.Models.EtapeFluxValidateurPermission", b =>
                {
                    b.HasOne("PrevisionBackend.Models.EtapeFlux", "EtapeFlux")
                        .WithMany("EtapeFluxValidateurPermissions")
                        .HasForeignKey("EtapeFluxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.PermissionPrev", "PermissionPrev")
                        .WithMany("EtapeFluxValidateurPermissions")
                        .HasForeignKey("PermissionPrevId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.Validateur", "Validateur")
                        .WithMany("EtapeFluxValidateurPermissions")
                        .HasForeignKey("ValidateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EtapeFlux");

                    b.Navigation("PermissionPrev");

                    b.Navigation("Validateur");
                });

            modelBuilder.Entity("PrevisionBackend.Models.EtapePrev", b =>
                {
                    b.HasOne("PrevisionBackend.Models.EtapeFlux", "EtapeFlux")
                        .WithMany()
                        .HasForeignKey("EtapeFluxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.EtapeFlux", null)
                        .WithMany("EtapesPrev")
                        .HasForeignKey("EtapeFluxId1");

                    b.HasOne("PrevisionBackend.Models.Prevision", "Prevision")
                        .WithMany("EtapesPrev")
                        .HasForeignKey("PrevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EtapeFlux");

                    b.Navigation("Prevision");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Ferme", b =>
                {
                    b.HasOne("PrevisionBackend.Models.Region", "Region")
                        .WithMany("Fermes")
                        .HasForeignKey("CodRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.Flux", "Flux")
                        .WithMany("Fermes")
                        .HasForeignKey("FluxId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.Producteur", "Producteur")
                        .WithMany("Fermes")
                        .HasForeignKey("RefProd")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.SystemVersion", "SystemVersion")
                        .WithMany()
                        .HasForeignKey("SystemVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flux");

                    b.Navigation("Producteur");

                    b.Navigation("Region");

                    b.Navigation("SystemVersion");
                });

            modelBuilder.Entity("PrevisionBackend.Models.LignePrevision", b =>
                {
                    b.HasOne("PrevisionBackend.Models.PrevisionDetails", "PrevisionDetails")
                        .WithMany("LignesPrevision")
                        .HasForeignKey("PrevisionDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrevisionDetails");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Permission", b =>
                {
                    b.HasOne("PrevisionBackend.Models.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("Module_Permissions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Prevision", b =>
                {
                    b.HasOne("PrevisionBackend.Models.Ferme", "Ferme")
                        .WithMany("Previsions")
                        .HasForeignKey("FermeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.Flux", "Flux")
                        .WithMany()
                        .HasForeignKey("FluxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.Version", "Version")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ferme");

                    b.Navigation("Flux");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("PrevisionBackend.Models.PrevisionDetails", b =>
                {
                    b.HasOne("PrevisionBackend.Models.Prevision", "Prevision")
                        .WithMany("Details")
                        .HasForeignKey("PrevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.Secteur", "Secteur")
                        .WithMany()
                        .HasForeignKey("SecteurCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prevision");

                    b.Navigation("Secteur");
                });

            modelBuilder.Entity("PrevisionBackend.Models.ProfilePermission", b =>
                {
                    b.HasOne("PrevisionBackend.Models.Permission", "Permission")
                        .WithMany("ProfilePermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.Profile", "Profile")
                        .WithMany("ProfilePermissions")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Secteur", b =>
                {
                    b.HasOne("PrevisionBackend.Models.Ferme", "Ferme")
                        .WithMany()
                        .HasForeignKey("CodFerm")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrevisionBackend.Models.Ferme", null)
                        .WithMany("Secteurs")
                        .HasForeignKey("FermeCodFerm");

                    b.Navigation("Ferme");
                });

            modelBuilder.Entity("PrevisionBackend.Models.User", b =>
                {
                    b.HasOne("PrevisionBackend.Models.Profile", "Profile")
                        .WithMany("Users")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Validateur", b =>
                {
                    b.HasOne("PrevisionBackend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Variete", b =>
                {
                    b.HasOne("PrevisionBackend.Models.Produit", "Produit")
                        .WithMany("Varietes")
                        .HasForeignKey("CodeProd")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("PrevisionBackend.Models.VarieteChamp", b =>
                {
                    b.HasOne("PrevisionBackend.Models.Variete", "Variete")
                        .WithMany("VarieteChamps")
                        .HasForeignKey("CodeVar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variete");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Version", b =>
                {
                    b.HasOne("PrevisionBackend.Models.SystemVersion", "SystemVersion")
                        .WithMany("Versions")
                        .HasForeignKey("SystemVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemVersion");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Cycle", b =>
                {
                    b.Navigation("Assolements");
                });

            modelBuilder.Entity("PrevisionBackend.Models.EtapeFlux", b =>
                {
                    b.Navigation("EtapeFluxValidateurPermissions");

                    b.Navigation("EtapesPrev");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Ferme", b =>
                {
                    b.Navigation("Assolements");

                    b.Navigation("Previsions");

                    b.Navigation("Secteurs");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Flux", b =>
                {
                    b.Navigation("Etapes");

                    b.Navigation("Fermes");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Module", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Permission", b =>
                {
                    b.Navigation("ProfilePermissions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.PermissionPrev", b =>
                {
                    b.Navigation("EtapeFluxValidateurPermissions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Prevision", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("EtapesPrev");
                });

            modelBuilder.Entity("PrevisionBackend.Models.PrevisionDetails", b =>
                {
                    b.Navigation("LignesPrevision");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Producteur", b =>
                {
                    b.Navigation("Fermes");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Produit", b =>
                {
                    b.Navigation("Varietes");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Profile", b =>
                {
                    b.Navigation("ProfilePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Region", b =>
                {
                    b.Navigation("Fermes");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Secteur", b =>
                {
                    b.Navigation("Assolements");
                });

            modelBuilder.Entity("PrevisionBackend.Models.SystemVersion", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Validateur", b =>
                {
                    b.Navigation("EtapeFluxValidateurPermissions");
                });

            modelBuilder.Entity("PrevisionBackend.Models.Variete", b =>
                {
                    b.Navigation("VarieteChamps");
                });

            modelBuilder.Entity("PrevisionBackend.Models.VarieteChamp", b =>
                {
                    b.Navigation("Assolements");
                });
#pragma warning restore 612, 618
        }
    }
}
